Pseudocode
.data

buffer -- holds file string
result -- the encrypted/decrypted string

.code

ReadFile
  Enters file string into buffer

GenerateKey
  creates key to test
  
SortKey
  uses key to find order of the encryption using permutation
  keyorder = 1,2,3,4,...n
  key = <combination of letters elements 1...n> ; HACK EXAMPLE BELOW
  
    key = HACK
    n = keylength
    i = 0
    check = 0                         ;If program iterates twice without an illegal order of letters, check will not equal zero
    OrderBegin:
      cmp i, n	
      je OrderEnd                    ;if it the last element, go to orderend
      cmp key[i], key[i+1]
      ja OrderSwap                   ;if the order is illegal (letterA !< letterB) skip swap
    OrderNext:
      inc i
      jmp OrderBegin
    OrderSwap:  		;Technicaly could be put above orderNext without the OrderSwap:, but its easier for me to read this way
      SWAP key[i] ,key[i+1]
      SWAP keyorder[i], keyorder[i+1]
      inc check                       ;check is incremented to show that there # number of swaps were done
      jmp OrderNext
    OrderEnd:
    	mov eax, offset check
	check = 0		;check is resetted first
      cmp eax, 0		;if there were any swaps, the order is "checked" again by jumping back to OrderBegin
      jne OrderBegin 
      

keyorder = "3124"
n = length
a = 0
index = -1 						;Starts at -1 for the first loop to have index = 0
De_Begin:
	inc index					;increase index by 1 for next L1 iteration
	cmp index, keyorderLength			;if (index > keyorderLength) then the current L2 will be invalid
	je De_End
	mov a, keyorder[index] 				;put the order value into a
	mov i, 0					;Set i to zero

De_Dust2:
	result.append(buffer[i*n+a])
	inc i
	cmp i, bufferlength/keyorderlength 
	je De_Begin
	jmp De_Dust2
	
De_End:
	
  
  CreateFile
    creates file and enters result string as text
